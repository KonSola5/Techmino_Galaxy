name: Techmino Galaxy CI

on:
  push:
    branches: [main, ci*]
    tags: [pre*, v*]
  pull_request:
    branches: [main]
env:
  BUILD_TYPE: ${{ fromJSON('["dev", "release"]')[startsWith(github.ref, 'refs/tags/v')] }}
  CORE_LOVE_PACKAGE_PATH: ./core.love
  CORE_LOVE_ARTIFACT_NAME: core_love_package
jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      app-name: ${{ steps.app-info.outputs.app-name }}
      version-name: ${{ steps.app-info.outputs.version-name }}
      version-string: ${{ steps.app-info.outputs.version-string }}
      version-code: ${{ steps.app-info.outputs.version-code }}
      commit-hash: ${{ steps.git-info.outputs.commit-hash }}
      base-name: ${{ steps.assemble-base-name.outputs.base-name }}
    steps:
      - uses: actions/checkout@v3
      - name: Install lua
        run: |
          sudo apt-get install lua5.3 -y
      - name: Get app info
        id: app-info
        shell: lua {0}
        run: |
          local version = require "version"
          os.execute('echo "app-name=' .. version.appName .. '" >> $GITHUB_OUTPUT')
          os.execute('echo "version-name=' .. version.appVer .. '" >> $GITHUB_OUTPUT')
          os.execute('echo "version-string=' .. version.verStr .. '" >> $GITHUB_OUTPUT')
          os.execute('echo "version-code=' .. tostring(version.apkCode) .. '" >> $GITHUB_OUTPUT')
      - name: Get git info
        id: git-info
        shell: bash
        run: |
          COMMIT_HASH=$(git rev-parse --short ${{ GITHUB.SHA }})
          echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
      - name: Assemble package base name
        id: assemble-base-name
        shell: bash
        run: |
          BASE_NAME=Techmino_Galaxy_${{ steps.app-info.outputs.version-string }}_${{ steps.git-info.outputs.commit-hash }}_#${{ GITHUB.RUN_NUMBER }}
          echo "base-name=$BASE_NAME" >> $GITHUB_OUTPUT
  build-core:
    runs-on: ubuntu-latest
    needs: get-info
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('product-name=' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ needs.get-info.outputs.app-name }}') + '\n')
      - name: Build core love package
        uses: 26F-Studio/love-actions-core@v1
        with:
          build-list: ./assets/ ./Zenitha/ ./conf.lua ./main.lua ./version.lua
          package-path: ${{ env.CORE_LOVE_PACKAGE_PATH }}
      - name: Upload core love package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
          path: ${{ env.CORE_LOVE_PACKAGE_PATH }}
      - name: Add icon to love package
        run: |
          cp ./.github/build/linux/${{ env.BUILD_TYPE }}/icon.png assets/image/icon.png
          zip -u ${{ env.CORE_LOVE_PACKAGE_PATH }} assets/image/icon.png
          rm assets/image/icon.png
      - name: Rename love package
        run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          mv ${{ env.CORE_LOVE_PACKAGE_PATH }} ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Core
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love
      - name: Prepare for release
        if: ${{ startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_FOLDER }}
          cp ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.love ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Bare.love
      - name: Upload release
        if: ${{ startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v') }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Bare.love
          body: ${{ github.event.head_commit.message }}
          prerelease: ${{ startsWith(github.ref, 'refs/tags/pre') }}

  auto-test:
    runs-on: ubuntu-latest
    needs: build-core
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Love actions for testing
        uses: 26F-Studio/love-actions-test@v1
        with:
          font-path: ./assets/fonts/RHDisplayGalaxy-Medium.otf
          language-folder: ./assets/language

  build-linux:
    runs-on: ubuntu-latest
    needs: [get-info, build-core, auto-test]
    env:
      OUTPUT_FOLDER: ./build
      RELEASE_FOLDER: ./release
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Process app name
        id: process-app-name
        shell: python3 {0}
        run: |
          import os
          import re

          product_name = re.sub(r'[^A-Za-z0-9]+', '-', '${{ needs.get-info.outputs.app-name }}').strip('-').lower()
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
            f.write('bundle-id=org.26f-studio.' + product_name + '\n')
            f.write('product-name=' + product_name + '\n')
      - name: Download core love package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
      - name: Add icon to love package
        run: |
          cp ./.github/build/linux/${{ env.BUILD_TYPE }}/icon.png assets/image/icon.png
          zip -u ${{ env.CORE_LOVE_PACKAGE_PATH }} assets/image/icon.png
          rm assets/image/icon.png
      - name: Build Linux packages
        id: build-packages
        uses: 26F-Studio/love-actions-linux@v1
        with:
          app-name: ${{ needs.get-info.outputs.app-name }}
          bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
          description: Techmino Galaxy is awesome!
          version-string: ${{ needs.get-info.outputs.version-string }}
          icon-path: ./.github/build/linux/${{ env.BUILD_TYPE }}/icon.png
          love-package: ${{ env.CORE_LOVE_PACKAGE_PATH }}
          product-name: ${{ steps.process-app-name.outputs.product-name }}
          output-folder: ${{ env.OUTPUT_FOLDER }}
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Linux_AppImage
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.AppImage
      - name: Upload Debian artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.get-info.outputs.base-name }}_Linux_Debian
          path: ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.deb
      - name: Prepare for release
        if: ${{ startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_FOLDER }}
          cp ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.AppImage ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Linux.AppImage
          cp ${{ env.OUTPUT_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}.deb ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Linux.deb
      - name: Upload release
        if: ${{ startsWith(github.ref, 'refs/tags/pre') || startsWith(github.ref, 'refs/tags/v') }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: |
            ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Linux.AppImage
            ${{ env.RELEASE_FOLDER }}/${{ steps.process-app-name.outputs.product-name }}_Linux.deb
          body: ${{ github.event.head_commit.message }}
          prerelease: ${{ startsWith(github.ref, 'refs/tags/pre') }}

  post-build:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      [
        get-info,
        auto-test,
        build-core,
        build-linux,
      ]
    env:
      ACTION_TYPE: ${{ fromJSON('[["Development", "Pre-release"], ["Release", "Release"]]')[startsWith(github.ref, 'refs/tags/v')][startsWith(github.ref, 'refs/tags/pre')] }}
    steps:
      - uses: actions/checkout@v3
      - name: Cleanup
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.CORE_LOVE_ARTIFACT_NAME }}
